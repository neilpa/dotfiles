#!/usr/bin/env zsh
#
# bootstrap installs things.

set -e
set -x

# sudo keep-alive from https://gist.github.com/cowboy/3118588
sudo -v
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

main () {
    # need command line tools before we can do anything else
    install_devtools

    # kickoff the xcode install in parallel
    install_xcode

    # next homebrew since some dotfile installers may use it
    install_homebrew

    # clone, link and install our dotfiles
    install_dotfiles
}

install_devtools () {
    info 'Installing command line tools. Expect a GUI prompt'
    xcode-select --install

    user 'Press enter to continue once installed'
    read

    info 'Command line developer tools installed at:'
    xcode-select -p
}

install_xcode () {
    user 'TODO install xcode'
    read
}


install_homebrew () {
    if [ -x "/usr/local/bin/brew" ]
    then
        info 'Homebrew already installed'
    else
        ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    fi
}

link_file () {
    #TODO Cleanup this function some
    local src=$1 dst=$2
    local overwrite= backup= skip=
    local action=

    if [ "$(readlink $dst)" = "$src:A" ]
    then
        success "$src already symlinked"
    else
        if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
        then
            user "File already exists: $(basename "$src"), what do you want to do? [s]kip, [o]verwrite, [b]ackup?"
            read -n 1 action

            case "$action" in
                o )
                    overwrite=true;;
                b )
                    backup=true;;
                s )
                    skip=true;;
                * )
                    ;;
            esac

            if [ "$overwrite" = "true" ]
            then
                rm -rf "$dst"
                success "removed $dst"
            fi

            if [ "$backup" = "true" ]
            then
                mv "$dst" "${dst}.backup"
                success "moved $dst to ${dst}.backup"
            fi

            if [ "$skip" = "true" ]
            then
                success "skipped $src"
            fi
        fi

        if [ "$skip" != "true" ]    # "false" or empty
        then
            ln -s "$1" "$2"
            success "linked $1 to $2"
        fi
    fi

}

install_dotfiles () {
    if [ -d $HOME/.config ]
    then
        info 'Dotfiles already exist at ~/.config'
    else
        info 'Cloning my dotfiles repo to ~/.config'
        git clone 'https://github.com/neilpa/dotfiles' $HOME/.config
    fi

    info 'Symlinking dotfiles into ~/.*'
    for src in $(find . -maxdepth 2 -name '*.symlink')
    do
        dst="$HOME/.$(basename "${src%.*}")"
        link_file "$src" "$dst"
    done

    info 'Running dotifle installers'
    find . -name install | while read installer ; do sh -c "${installer}" ; done
}

info () {
    printf "  [ \033[00;34m..\033[0m ] $1\n"
}

user () {
    printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success () {
    printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
    printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
    echo ''
    exit
}

main

